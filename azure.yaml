tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs the nodecellar application on an Azure Cloud environment.

imports:
  - http://cloudify.co/spec/cloudify/4.5.5/types.yaml
  - plugin:cloudify-azure-plugin
  - plugin:cloudify-utilities-plugin
  - types/nodecellar.yaml
  - types/azure-types.yaml
  - types/haproxy/haproxy.yaml
  - types/scale/scale.yaml

inputs:

  image:
    default:
      publisher: Canonical
      offer: UbuntuServer
      sku: 14.04.5-LTS
      version: latest

  size:
    default: Standard_A3

  resource_prefix:
    default: nc

  resource_suffix:
    default: '1'

  retry_after:
    type: integer
    default: 60

  location:
    default: { get_secret: azure_location }

  agent_user:
    description: The user name of the agent on the instance created from the image.
    default: ubuntu

  agent_key_public:
    default: { get_secret: agent_key_public }

  agent_key_private:
    default: { get_secret: agent_key_private }

  ssh_public_keys:
    description: the public key
    default:
    - path: {concat:[ '/home/', { get_input: agent_user }, '/.ssh/authorized_keys' ]}
      keyData: { get_input: agent_key_public }

  manager_network:
    default: external

  network_deployment_name:
    default: azure-example-network

  use_existing_network_deployment:
    default: true

  webserver_port:
    description: The external web server port
    default: 8080

dsl_definitions:

  azure_config: &azure_config
    subscription_id: { get_secret: azure_subscription_id }
    tenant_id: { get_secret: azure_tenant_id }
    client_id: { get_secret: azure_client_id }
    client_secret: { get_secret: azure_client_secret }

node_templates:

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    relationships:
      - type: node_connected_to_mongo
        target: mongod
      - type: node_contained_in_nodejs
        target: nodejs
      - type: app_connected_to_haproxy
        target: haproxy

  mongod:
    type: nodecellar.nodes.MonitoredMongoDatabase
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongo_host

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  haproxy:
    type: nodecellar.nodes.MonitoredHAProxy
    properties:
      backend_app_port: { get_property: [ nodecellar, port ] }
    relationships:
      - target: haproxy_frontend_host
        type: cloudify.relationships.contained_in

  haproxy_frontend_host:
    type: nodecellar.nodes.MonitoredServer
    properties:
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.connected_to_storage_account
      target: storage_account
    - type: cloudify.azure.relationships.connected_to_availability_set
      target: availability_set
    - type: cloudify.azure.relationships.connected_to_nic
      target: haproxy_host_nic

  mongo_host:
    type: nodecellar.nodes.MonitoredServer
    properties:
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.connected_to_storage_account
      target: storage_account
    - type: cloudify.azure.relationships.connected_to_availability_set
      target: availability_set
    - type: cloudify.azure.relationships.connected_to_nic
      target: mongo_host_nic

  nodejs_host:
    type: nodecellar.nodes.MonitoredServer
    properties:
      azure_config: *azure_config
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.connected_to_storage_account
      target: storage_account
    - type: cloudify.azure.relationships.connected_to_availability_set
      target: availability_set
    - type: cloudify.azure.relationships.connected_to_nic
      target: nodejs_host_nic

  network_security_group:
    type: cloudify.azure.nodes.network.NetworkSecurityGroup
    properties:
      name: {concat:[{get_input: resource_prefix},nsg,{get_input: resource_suffix}]}
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        securityRules:
        - name: njssg_ssh
          properties:
            description: SSH access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 22
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 102
            access: Allow
            direction: Inbound
        - name: njssg_http
          properties:
            description: HTTP access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: { get_property: [ nodecellar, port ] }
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 103
            access: Allow
            direction: Inbound
        - name: njssg_mongoa
          properties:
            description: Mongo access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: { get_property: [ mongod, port ] }
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 104
            access: Allow
            direction: Inbound
        - name: njssg_mongob
          properties:
            description: Mongo API access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 28017
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 105
            access: Allow
            direction: Inbound
        - name: njssg_hapweb
          properties:
            description: HAPROXY Web access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: { get_property: [ haproxy, frontend_port ]}
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 106
            access: Allow
            direction: Inbound
        - name: njssg_hapapi
          properties:
            description: HAPROXY API access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange:  { get_property: [ haproxy, statistics_port ]}
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 107
            access: Allow
            direction: Inbound
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  mongo_host_nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.nic_connected_to_network_security_group
      target: network_security_group
    - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
      target: mongo_host_nic_ip_cfg

  nodejs_host_nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.nic_connected_to_network_security_group
      target: network_security_group
    - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
      target: nodejs_host_nic_ip_cfg

  haproxy_host_nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.nic_connected_to_network_security_group
      target: network_security_group
    - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
      target: haproxy_host_nic_ip_cfg

  mongo_host_nic_ip_cfg:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
    relationships:
    - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
      target: subnet

  nodejs_host_nic_ip_cfg:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
    relationships:
    - type: cloudify.relationships.contained_in
      target: resource_group
    - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
      target: subnet

  haproxy_host_nic_ip_cfg:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
    relationships:
    - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
      target: subnet
    - type: cloudify.azure.relationships.ip_configuration_connected_to_public_ip
      target: nodecellar_ip

  nodecellar_ip:
    type: cloudify.azure.nodes.network.PublicIPAddress
    properties:
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        publicIPAllocationMethod: Static
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  availability_set:
    type: cloudify.azure.nodes.compute.AvailabilitySet
    properties:
      name: {concat:[{get_input: resource_prefix},availset,{get_input: resource_suffix}]}
      location: { get_secret: azure_location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  storage_account:
    type: cloudify.azure.nodes.storage.StorageAccount
    properties:
      location: { get_secret: azure_location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        accountType: Standard_LRS
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  subnet:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      resource_group_name: { get_attribute: [ azure, deployment, outputs, resource_group ] }
      name: { get_attribute: [ azure, deployment, outputs, public_subnet ] }
      azure_config: *azure_config
      use_external_resource: true
      location: { get_attribute: [ azure, deployment, outputs, location ] }
    relationships:
    - type: cloudify.azure.relationships.contained_in_virtual_network
      target: virtual_network

  virtual_network:
    type: cloudify.azure.nodes.network.VirtualNetwork
    properties:
      resource_group_name: { get_attribute: [ azure, deployment, outputs, resource_group ] }
      name: { get_attribute: [ azure, deployment, outputs, virtual_network ] }
      azure_config: *azure_config
      use_external_resource: true
      location: { get_attribute: [ azure, deployment, outputs, location ] }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  resource_group:
    type: cloudify.azure.nodes.ResourceGroup
    properties:
      name: { get_attribute: [ azure, deployment, outputs, resource_group ] }
      use_external_resource: true
      location: { get_attribute: [ azure, deployment, outputs, location ] }
      azure_config: *azure_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: azure

  azure:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: { get_input: network_deployment_name }
          blueprint_archive: https://github.com/cloudify-community/blueprint-examples/releases/download/4.5.0/azure-example-network.zip
          main_file_name: blueprint.yaml
          external_resource: { get_input: use_existing_network_deployment }
        deployment:
          id: { get_input: network_deployment_name }
          outputs:
            resource_group: resource_group
            virtual_network: virtual_network
            public_subnet: public_subnet
            location: location
          external_resource: { get_input: use_existing_network_deployment }
        reexecute: false

outputs:

  endpoint:
    description: Web application endpoint
    value:
      concat:
      - 'http://'
      - { get_attribute: [ haproxy_frontend_host, public_ip ] }
      - ':'
      - { get_property: [ haproxy, frontend_port ] }
      - '/'


groups:

  nodejs_group:
    members:
      - nodejs_host_nic_ip_cfg
      - nodejs_host_nic
      - nodejs_host
      - nodejs

  scale_up_group:
    members: [nodejs_host]
    policies:
      auto_scale_up:
        type: scale_policy_type
        properties:
          policy_operates_on_group: true
          scale_limit: 6
          scale_direction: '<'
          scale_threshold: 3
          service_selector: .*nodejs_host.*.process.node.cpu.percent
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: 1
                scalable_entity_name: nodejs_group

  scale_down_group:
    members: [nodejs_host]
    policies:
      auto_scale_down:
        type: scale_policy_type
        properties:
          scale_limit: 2
          scale_direction: '>'
          scale_threshold: 1
          service_selector: .*nodejs_host.*.process.node.cpu.percent
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: -1
                scalable_entity_name: nodejs_group

  heal_group:
    members: [nodejs_host]
    policies:
      simple_autoheal_policy:
        type: cloudify.policies.types.host_failure
        properties:
          service:
            - .*nodejs_host.*.cpu.total.system
          interval_between_workflows: 60
        triggers:
          auto_heal_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: heal
              workflow_parameters:
                node_instance_id: { 'get_property': [ SELF, node_id ] }
                diagnose_value: { 'get_property': [ SELF, diagnose ] }

policies:

  nodejs_group_scaling_policy:
    type: cloudify.policies.scaling
    properties:
    properties:
      min_instances: 2
      max_instances: 5
      default_instances:  2
    targets: [nodejs_group]
