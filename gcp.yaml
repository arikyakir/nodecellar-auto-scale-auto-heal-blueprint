tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs the nodecellar application behind an haproxy instance on an openstack cloud environment.

imports:
  - http://cloudify.co/spec/cloudify/4.5.5/types.yaml
  - plugin:cloudify-gcp-plugin
  - plugin:cloudify-utilities-plugin
  - types/nodecellar.yaml
  - types/gcp-types.yaml
  - types/haproxy/haproxy.yaml
  - types/scale/scale.yaml

inputs:

  image:
    description: >
      A GCE Image ID. Tested with a Ubuntu 14.04 image.
    default: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1404-trusty-v20170517

  instance_type:
    description: >
      A GCE instance sytpe.
    default: n1-standard-2

  agent_user:
    description: The user name of the agent on the instance created from the image.
    default: ubuntu

  agent_key_public:
    default: { get_secret: agent_key_public }

  agent_key_private:
    default: { get_secret: agent_key_private }

  resource_prefix:
    default: cfy-nc

  manager_network:
    default: external

  network_deployment_name:
    default: gcp-example-network

  use_existing_network_deployment:
    default: true

dsl_definitions:

  client_config: &gcp_config
    auth:
      type: service_account
      auth_uri: https://accounts.google.com/o/oauth2/auth
      token_uri: https://accounts.google.com/o/oauth2/token
      auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
      client_x509_cert_url: { get_secret: gcp_client_x509_cert_url }
      client_email: { get_secret: gcp_client_email }
      client_id: { get_secret: gcp_client_id }
      project_id: { get_secret: gcp_project_id }
      private_key_id: { get_secret: gcp_private_key_id }
      private_key: { get_secret: gcp_private_key }
    project: { get_secret: gcp_project_id }
    zone: { get_secret: gcp_zone }

node_templates:

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    relationships:
      - type: node_connected_to_mongo
        target: mongod
      - type: node_contained_in_nodejs
        target: nodejs
      - type: app_connected_to_haproxy
        target: haproxy

  mongod:
    type: nodecellar.nodes.MonitoredMongoDatabase
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  haproxy:
    type: nodecellar.nodes.MonitoredHAProxy
    properties:
      backend_app_port: { get_property: [ nodecellar, port ] }
    relationships:
      - target: haproxy_frontend_host
        type: cloudify.relationships.contained_in

  mongod_host:
    type: nodecellar.nodes.MonitoredServer
    properties:
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: public_subnet

  nodejs_host:
    type: nodecellar.nodes.MonitoredServer
    instances:
      deploy: 1
    properties:
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.relationships.depends_on
        target: mongod_host

  haproxy_frontend_host:
    type: nodecellar.nodes.MonitoredServer
    properties:
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.relationships.depends_on
        target: nodejs_host

  mongod_fw:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *gcp_config
      allowed:
        tcp:
          - 28017
          - { get_property: [ mongod, port ] }
          - 22
      sources:
        - 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.connected_to
        target: network

  nodecellar_fw:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *gcp_config
      allowed:
        tcp:
          - { get_property: [ nodecellar, port ] }
          - 22
      sources:
        - 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.connected_to
        target: network

  haproxy_frontend_fw:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *gcp_config
      allowed:
        tcp:
          - { get_property: [ haproxy, statistics_port ]}
          - { get_property: [ haproxy, frontend_port ] }
          - 22
      sources:
        - 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.connected_to
        target: network

  public_subnet:
    type: cloudify.gcp.nodes.SubNetwork
    properties:
      use_external_resource: true
      name: { get_attribute: [ gcp, deployment, outputs, subnet ] }
      region: { get_attribute: [ gcp, deployment, outputs, region ] }
      gcp_config: *gcp_config
    relationships:
    - type: cloudify.gcp.relationships.contained_in_network
      target: network

  network:
    type: cloudify.gcp.nodes.Network
    properties:
      use_external_resource: true
      name: { get_attribute: [ gcp, deployment, outputs, network ] }
      gcp_config: *gcp_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: gcp

  gcp:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: { get_input: network_deployment_name }
          blueprint_archive: https://github.com/cloudify-community/blueprint-examples/releases/download/4.5.0/gcp-example-network.zip
          main_file_name: blueprint.yaml
          external_resource: { get_input: use_existing_network_deployment }
        deployment:
          id: { get_input: network_deployment_name }
          outputs:
            network: network
            subnet: subnet
            region: region
            zone: zone
          external_resource: { get_input: use_existing_network_deployment }
        reexecute: false

outputs:

  endpoint:
    description: Web application endpoint
    value:
      concat:
      - 'http://'
      - { get_attribute: [  haproxy_frontend_host, networkInterfaces, 0, accessConfigs, 0, natIP ] }
      - ':'
      - { get_property: [ haproxy, frontend_port ] }
      - '/'

groups:

  nodejs_group:
    members:
      - nodejs_host

  scale_up_group:
    members: [nodejs_host]
    policies:
      auto_scale_up:
        type: scale_policy_type
        properties:
          policy_operates_on_group: true
          scale_limit: 6
          scale_direction: '<'
          scale_threshold: 6
          service_selector: .*nodejs_host.*.process.node.cpu.percent
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: 1
                scalable_entity_name: nodejs_group

  scale_down_group:
    members: [nodejs_host]
    policies:
      auto_scale_down:
        type: scale_policy_type
        properties:
          scale_limit: 2
          scale_direction: '>'
          scale_threshold: 1
          service_selector: .*nodejs_host.*.process.node.cpu.percent
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: -1
                scalable_entity_name: nodejs_group

  heal_group:
    members: [nodejs_host]
    policies:
      simple_autoheal_policy:
        type: cloudify.policies.types.host_failure
        properties:
          service:
            - .*nodejs_host.*.cpu.total.system
          interval_between_workflows: 60
        triggers:
          auto_heal_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: heal
              workflow_parameters:
                node_instance_id: { 'get_property': [ SELF, node_id ] }
                diagnose_value: { 'get_property': [ SELF, diagnose ] }

policies:

  nodejs_group_scaling_policy:
    type: cloudify.policies.scaling
    properties:
    properties:
      min_instances: 2
      max_instances: 5
      default_instances:  2
    targets: [nodejs_group]
